package route

import (
	. "github.com/smartystreets/goconvey/convey"
	"testing"
)

func TestInsert(t *testing.T) {
	//routeTree := NewRadixTree()
	Convey("普通路由测试", t, func() {
		//routeTree.insert("/user", http.MethodGet, nil)
		//routeTree.insert("/user", http.MethodPost, &route{})
		//routeTree.insert("/us/er", http.MethodGet, &route{})
		//routeTree.insert("/use/route", http.MethodGet, &route{handler: &handlerMethod{}})
		//r, _ := routeTree.search("/us/er", http.MethodGet)
		//assert.NotNil(t, r)
		//r, _ = routeTree.search("/user", http.MethodPost)
		//assert.NotNil(t, r)
		//r, _ = routeTree.search("/user", http.MethodGet)
		//assert.Nil(t, r)
		//r, _ = routeTree.search("/use/route", http.MethodGet)
		//assert.NotNil(t, r)

	})
	//Convey("冒号带参路由测试", t, func() {
	//	Convey("一级带参路由", func() {
	//		routeTree.insert("/user/:id", http.MethodGet, &route{handler: &handlerMethod{}})
	//		r, paramValue := routeTree.search("/user/1", http.MethodGet)
	//		assert.NotNil(t, r)
	//		if assert.NotNil(t, paramValue) {
	//			assert.Equal(t, paramValue["id"], "1")
	//		}
	//		routeTree.insert("/user/:id", http.MethodPost, nil)
	//		r, paramValue = routeTree.search("/user/1", http.MethodPost)
	//		assert.Nil(t, r)
	//	})
	//
	//	Convey("二级带参路由测试", func() {
	//		routeTree.insert("/user/:id/:name", http.MethodGet, &route{})
	//		r, paramValue := routeTree.search("/user/1/test", http.MethodGet)
	//		assert.NotNil(t, r)
	//		if assert.NotNil(t, paramValue) {
	//			assert.Equal(t, paramValue["id"], "1")
	//			assert.Equal(t, paramValue["name"], "test")
	//		}
	//
	//		r, paramValue = routeTree.search("/user/1/test/test", http.MethodGet)
	//		assert.Nil(t, r)
	//	})
	//	Convey("三级带参路由测试", func() {
	//		routeTree.insert("/use/route/:id/:name/:age", http.MethodPost, &route{handler: &handlerMethod{}})
	//		r, paramValue := routeTree.search("/use/route/1/test/12", http.MethodPost)
	//		assert.NotNil(t, r)
	//		if assert.NotNil(t, paramValue) {
	//			assert.Equal(t, paramValue["id"], "1")
	//			assert.Equal(t, paramValue["name"], "test")
	//			assert.Equal(t, paramValue["age"], "12")
	//		}
	//	})
	//})
	
}
